setwd("c:/r_workdata")
Sys.getlocale()
Sys.setlocale("LC_ALL","C")
Sys.setlocale("LC_ALL", "Korean")

install.packages("dplyr")
install.packages("plyr")  #주의 dplyr패키지의 arrange, count, desc, failwith, id, mutate, rename, summarise 충돌
install.packages("googleVis")
install.packages("devtools")
install.packages("lubridate")
install.packages("stringr")
install.packages("ggplot2")
install.packages("RColorBrewer")
install.packages("wordcloud")

library(dplyr)
library(plyr)
library(googleVis)
library(devtools)
library(lubridate)
library(stringr)
library(ggplot2)
library(RColorBrewer)
library(wordcloud)

#데이터 전처리 : dplyr
# 1. filter() : 행추출
# 2. select() : 열(변수)추출
# 3. arrange() : 정렬
# 4. mutate() : 변수추가
# 5. summarise() : 통계치 산출
# 6. group_by() : 집단별 분류
# 
# 자주 사용하는 요약통계 함수
# mean() : 평균, sd() : 표준편차, sum() : 합계, median() : 중앙값, min() : 최소값, max() : 최대값, n() : 빈도

mpg

#문제) 회사별로 "suv" 자동차의 도시 및 고속도로 통합 연비 평균을 구해 내림차순으로 정렬하고, 1~5위까지 출력하시오.

# 분석절차
# 1. 회사별 분류 : group_by()
# 2. suv추출 : filter()
# 3. 통합연비 변수 생성 : mutate()
# 4. 통합연비 평균 산출 : summarise()
# 5. 내림차순 정렬 : arrange(desc())
# 6. 1~5위까지 출력 : head(5)

mpg %>% 
  group_by(manufacturer) %>% 
  filter(class == "suv") %>% 
  mutate(tot = (cty+hwy)/2) %>% 
  dplyr::summarise(mean_tot = mean(tot)) %>% 
  arrange(desc(mean_tot)) %>% 
  head(5)

# 그래픽 기초
# plot() : 분포도나 꺽은 선
# plot(y축 데이터, 옵션)
# plot(x축 데이터, 옵션)
# plot(x축, y축, 옵션)


v1 = c(2,2,2)
plot(v1)

# x축, y축
x = 1:3
y = 3:1

plot(x,y)

# x축, y축의 한계값 지정
plot(x,y, xlim = c(1,10), ylim = c(1,5))

# 축제목 : xlab, ylab, main : 그래프 제목
plot(x,y, xlim = c(1,10), ylim = c(1,5), xlab="x축값", ylab = "y축값", main = "PLOT TEST")

plot.new()  # 창을 지우고 다시 그린다
dev.new()   # 새로운 창에서 다시 그린다

v1 = c(100,130,120,160,150)
plot(v1, type = 'o', col = 'red', ylim=c(0,200), axes=F, ann=F)
axis(1, at=1:5, lab=c("MON", "TUE", "WED", "THU", "FRI"))
axis(2, ylim=c(0,200))
title(main = "FRUIT", col.main='red', font.main=4)
title(xlab="DAY", col.lab="black")
title(ylab="PRICE", col.lab="blue")

# 그래프의 배치 조정 : mfrow
# par(mfrow=c(nr,nc)
v1
par(mfrow=c(3,3))
plot(v1, type = 'b')  # 점과 선
plot(v1, type = 's')  # 왼쪽시작 계단형
plot(v1, type = 'S')  # 오른쪽시작 계단형
plot(v1, type = 'l')  # 선
plot(v1, type = 'p')  # 점
plot(v1, type = 'c')  # 'b'에서 점 생략
plot(v1, type = 'o')  # 점과 선이 중첩
plot(v1, type = 'h')  # 각 점에서 x축까지 수직선
plot(v1, type = 'n')  # 축만 표현

par(mfrow=c(1,3))
pie(v1)
plot(v1, type = 'o')
barplot(v1)

par(mfrow=c(1,1))
a=c(1,2,3)
plot(a, xlab = 'aaaa')

# 그래프 여백조정
# mgp = c(제목위치, 지표값위치, 지표선위치)
par(mgp=c(3,2,1))
plot(a, xlab='aaa')

# oma(outside margine) : 그래프의 전체 여백 조정, oma(bottom, left, top, right)
par(oma=c(1,1,1,1))
plot(a, xlab='aaa')

# 여러개의 그래프를 중첩으로 그리기
# par(new=T), add=T
v1=c(1,2,3,4,5)
v2=c(5,4,3,2,1)
v3=c(3,4,5,6,7)

plot(v1, type = 's', col='red', ylim=c(1,5))
par(new=T)
plot(v2, type = 'o', col='blue', ylim = c(1,5))
par(new=T)
plot(v3, type = 'l', col='green')

plot(v1, type = 's', col='red', ylim=c(1,10))
lines(v2, type = 'o', col='blue', ylim=c(1,5))
lines(v3, type = 'l', col='green')

# 범례추가
# legend(x축, y축, 내용, cex=글자크기, col=색상, pch=크기, lty=선모양)

legend(4,9,c('v1', 'v2','v3'), cex=0.9, col=c('red','blue','green'), lty=1) #lty=0~6

# barplot() : 막대그래프
x=c(1,2,3,4,5)
barplot(x)

# 가로 출력
barplot(x, horiz = T)

# 그룹으로 묶어서 출력 : beside=T
x=matrix(c(5,4,3,2), 2)
x
barplot(x, beside = T, names=c(5,3), col=c('green', 'yellow'))

# 그룹으로 묶어서 가로 출력
barplot(x, beside = T, names=c(5,3), col=c('green', 'yellow'), horiz = T)

# 하나로 묶어서 출력
barplot(x, names=c(5,3), col=c('green', 'yellow'), ylim=c(0,12))

# 하나의 막대로 가로 출력
barplot(x, names=c(5,3), col=c('green', 'yellow'), xlim=c(0,12), horiz = T)

# 문제) 여러 막대를 그룹으로 묶어서 한꺼번에 출력
v1 = c(100,120,140,160,180)
v2 = c(120,130,150,140,170)
v3 = c(140,170,120,110,160)

qty=data.frame(BANANA=v1, CHERRY=v2, ORANGE=v3)
qty

# barplot을 그룹으로 묶어서 출력할때는 반드시 출력대상이 matrix여야 한다.
class(qty)
barplot(as.matrix(qty), main="FRUITS SALES", beside = T, col=rainbow(nrow(qty)), ylim = c(0,400))
legend(14,400, c('MON','TUE','WED','THU','FRI'), cex=0.8, fill = rainbow(nrow(qty)))
qty

t(qty)

barplot(t(qty), main = "FRUITS SALES", ylim=c(0, 900), col=rainbow(length(qty)), space=0.1, cex.axis=0.8, las=2, names.arg=c('MON','TUE','WED','THU','FRI'),cex=0.8)
legend(0.2, 800, names(qty), cex=0.7, fill = rainbow(length(qty)))

# beside=T 적용
barplot(t(qty), main = "FRUITS SALES", ylim=c(0, 300), col=rainbow(length(qty)), cex.axis=0.8, las=2, names.arg=c('MON','TUE','WED','THU','FRI'),cex=0.8, beside = T)
legend(0.2, 300, names(qty), cex=0.7, fill = rainbow(length(qty)))

# 조건을 주고 그래프 그리기
# peach값이 200이상 red, 180~199 yellow, 그 이하 green

peach=c(180,200,250,198,170)

colors=c()
for (i in 1:length(peach)) {
  if (peach[i]>=200) {
    colors = c(colors,'red')
  } else if (peach[i]>=180) {
    colors = c(colors, 'yellow')
  } else {
    colors = c(colors, 'green')
  }
}

barplot(peach, main = "PEACH SLAES", names.arg = c("MON",'TUE','WED','THU','FRI'), col=colors)

# 매개변수가 있는 함수 처리
f1 = function(f){
  colors = NULL
  for (i in 1:length(f)) {
    if (f[i]>=200) {
      colors[i]='blue'
    } else if (f[i]>=180) {
      colors[i]='pink'
    } else {
      colors[i]='green'
    }
  }
  return(colors)
}

f1(peach)
barplot(peach, col=f1(peach), names.arg = c('MON','TUE','WED','THU','FRI'))

# 실습 

x1=c(100,130,190,160,150,220)

# 1. 한 화면에 6개의 그래프를 나타내어라
par(mfrow=c(2,3))

# 2. 점과 선의 조합으로 이루어진 그래프 출력
plot(x1, type = 'o', col='red', ylim = c(0,250))

# 3. 가로출력
barplot(x1, horiz = T)

# 4. 그룹으로 묶어서 출력
v1 = matrix(x1, 2,3)
v1
barplot(v1, beside = T, names=c(1,2,3), col=c('green','yellow'))

# 5. 그룹으로 묶어서 가로 출력 
barplot(v1, beside = T, names=c(1,2,3), col=c('green','yellow'), horiz = T, xlim = c(0,500))

# 6. 하나의 막대그래프로 가로로 출력
barplot(v1, names=c(1,2,3), col=c('green','yellow'), horiz = T, xlim = c(0,500))

# 7. 하나의 막대그래프로 세로로 출력
barplot(v1, beside = T, names=c(1,2,3), col=c('green','yellow'), ylim = c(0,500))

# 8. 조건을 주고 그래프 그리기 : 한화면에 하나의 그래프로 표현
#    v1값이 200이상 red, 180~199 yellow, 그 이하 green
par(mfrow=c(1,1))
x1

colors=c()
for (i in 1:length(x1)) {
  if (x1[i] >= 200) {
    colors=c(colors, 'red')
  } else if (x1[i] >= 180) {
    colors=c(colors, 'yellow')
  } else {
    colors=c(colors, 'green')
  }
}

barplot(x1, main="TEST SALES", names.arg = c('MON','TUE','WED','THU','FRI','SAT'), col=colors)

# 히스토그램(툭정데이터의 빈도수를 막대그래프로 나타낸것) : hist()
h=c(182,175,167,163,172,181,166,159,155)
hist(h, main="HIST")

# pie() : 전체의 합이 100이 되어야 하는 경우 서로를 비교할때 사용
p1 = c(11,19,33,37)
pie(p1)

pie(p1, radius=1, init.angle = 90)
pie(p1, radius=1, init.angle = 90, col=rainbow(length(p1)), labels = c('w1','w2','w3','w4'))

# 수치값 출력
pct = round(p1/sum(p1)*100, 1)
lab = paste(pct, "%")
pie(p1, radius=1, init.angle = 90, col=rainbow(length(p1)), labels = lab)
legend(0.8,1.1,c('w1','w2','w3','w4'), cex=0.5, fill = rainbow(length(p1)))

pct = round(p1/sum(p1)*100, 1)
lab1 = c('w1','w2','w3','w4')
lab2 = paste(lab1, '\n', pct, '%')
pie(p1, radius=1, init.angle = 90, col=rainbow(length(p1)), labels = lab2)

# pie3D
install.packages("plotrix")
library(plotrix)

pct = round(p1/sum(p1)*100, 1)
lab1 = c('w1','w2','w3','w4')
lab2 = paste(lab1, '\n', pct, '%')
pie3D(p1, radius=1, col=rainbow(length(p1)), labels = lab2, explode = 0.05)

# 상자차트(최대, 최소, 중앙값등을 한눈에 본다) : boxplot()
v1=c(10,12,15,11,20)
v2=c(5,7,15,8,9)
v3=c(11,20,15,18,13)
boxplot(v1,v2,v3)

boxplot(v1,v2,v3, col=c('blue','yellow','pink'), names=c('BLUE','YELLOW','PINK'), horizontal = T)

# 관계도 그리기 : igraph()
# 서로 연관된 데이터들을 연결해서 표현해준다. 소셜네트워크
install.packages("igraph")
library(igraph)
g1=graph(c(1,2, 2,3, 2,4, 1,4, 5,5, 3,6))
g1
plot(g1)

name = c('홍길동대표', '일지매부장', '김유신과장', '손흥민대리','윤봉길대리','이순신부장','유관순과장','신사임당대리','강감찬부장','광개토과장','정몽주대리')

pemp = c('홍길동대표', '홍길동대표','일지매부장','김유신과장','김유신과장','홍길동대표','이순신부장','유관순과장','홍길동대표','강감찬부장','광개토과장')

emp=data.frame(이름=name, 상사이름=pemp)
emp

g=graph.data.frame(emp, directed = T)
plot(g, layout = layout.fruchterman.reingold, vertex.size=5, edge.arrow.size=0.3)

plot(g, layout = layout.fruchterman.reingold, vertex.size=5, edge.arrow.size=0, vertex.label=NA)

dev.new()

savePlot('network.png', type = 'png')





